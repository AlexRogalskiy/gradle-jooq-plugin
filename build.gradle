plugins {
    id 'com.gradle.build-scan' version '3.1.1'
    id 'nu.studer.plugindev' version '1.0.12'
    id 'nu.studer.credentials' version '2.0'
    id 'groovy'
}

group = 'nu.studer'
version = '3.0.4-DEV'

buildScan {
    publishAlways()
    obfuscation {
        ipAddresses { addresses -> addresses.collect { address -> '0.0.0.0' } }
    }
}

dependencies {
    compile("org.jooq:jooq-codegen:3.12.3")

    compile("javax.xml.bind:jaxb-api:2.3.1")
    compile("javax.activation:activation:1.1.1")
    compile("com.sun.xml.bind:jaxb-core:2.3.0.1")
    compile("com.sun.xml.bind:jaxb-impl:2.3.0.1")

    testCompile "com.h2database:h2:1.4.200"
    testCompile("org.spockframework:spock-core:1.3-groovy-2.5") {
        exclude module: 'groovy-all'
    }
}

plugindev {
    pluginImplementationClass 'nu.studer.gradle.jooq.JooqPlugin'
    pluginDescription 'Gradle plugin that integrates jOOQ. For each configuration, the plugin adds a task to generate the sources from a given database schema and includes the generated sources in the specified source set. Multiple configurations are supported. The code generation tasks fully participate in the Gradle uptodate checks.'
    pluginLicenses 'Apache-2.0'
    pluginTags 'gradle', 'plugin', 'jooq'
    authorId 'etiennestuder'
    authorName 'Etienne Studer'
    authorEmail 'etienne@studer.nu'
    projectUrl 'https://github.com/etiennestuder/gradle-jooq-plugin'
    projectInceptionYear '2014'
    done()
}

bintray {
    user = credentials.BINTRAY_USER
    key = credentials.BINTRAY_API_KEY
    pkg.repo = 'gradle-plugins'
    dryRun = false
}

test {
    maxParallelForks = 2
}

def testAll = tasks.create('testAll') {
    description = 'Runs the Gradle cross-version tests.'
    group = 'Verification'
}

List<String> testedGradleVersions = []
testedGradleVersions << "6.0.1"
testedGradleVersions << "5.6.4"
testedGradleVersions << "5.0"

testedGradleVersions.each { version ->
    project.tasks.create("test_" + version.replaceAll("[^a-zA-Z0-9]", "_"), Test).with {
        systemProperty 'testContext.gradleVersion', version
        testAll.dependsOn(it)
    }
}

// run tests with Java 9
//project.gradle.taskGraph.whenReady { taskGraph ->
//    project.tasks.withType(Test) { Test testTask ->
//        if (taskGraph.hasTask(testTask)) {
//            testTask.executable = new File('/Library/Java/JavaVirtualMachines/jdk-9.0.4.jdk/Contents/Home/bin/java')
//        }
//    }
//}
